#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#define DNS_SERVER "8.8.8.8"
#define DNS_PORT 53
#define BUFFER_SIZE 512
void resolve_hostname(const char *hostname) {
    struct sockaddr_in server_addr;
    unsigned char buffer[BUFFER_SIZE];
    struct hostent *host_entry;
    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(DNS_PORT);
    inet_pton(AF_INET, DNS_SERVER, &server_addr.sin_addr);
    memset(buffer, 0, BUFFER_SIZE);
    buffer[0] = 0x12;
    buffer[1] = 0x34;
    buffer[2] = 0x01;
    buffer[3] = 0x00;
    buffer[4] = 0x00;
    buffer[5] = 0x01;
    buffer[6] = 0x00;
    buffer[7] = 0x00;
    buffer[8] = 0x00;
    buffer[9] = 0x00;
    char *token = strtok((char *)hostname, ".");
    int pos = 12;
    while (token != NULL) {
        buffer[pos++] = strlen(token);
        strcpy((char *)&buffer[pos], token);
        pos += strlen(token);
        token = strtok(NULL, ".");
    }
    buffer[pos++] = 0x00;
    buffer[pos++] = 0x00;
    buffer[pos++] = 0x01;
    buffer[pos++] = 0x00;
    buffer[pos++] = 0x01;
    sendto(sockfd, buffer, pos, 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
    socklen_t len = sizeof(server_addr);
    recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, &len);
    if (buffer[pos - 1] == 0x00) {
        printf("IP Address: %d.%d.%d.%d\n", buffer[pos - 4], buffer[pos - 3], buffer[pos - 2], buffer[pos - 1]);
    }
    close(sockfd);
}
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <hostname>\n", argv[0]);
        exit(EXIT_FAILURE);
    }
    resolve_hostname(argv[1]);
    return 0;
}
